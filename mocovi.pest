
program = {
    SOI ~
    stmts? ~
    EOI
}

stmts = {
    stmt+
}

stmt = {
    compound_stmt |
    (simple_stmt ~ NEWLINE) |
    NEWLINE
}

simple_stmt = {
  assignment |
  return_stmt |
  func_def_one_line |
  expr
}

compound_stmt = {
    if_stmt |
    while_stmt |
    for_stmt |
    class_def |
    func_def
}

return_stmt = {
    "return" ~ expr
}

if_stmt = {
    "if" ~ expr ~ NEWLINE ~
    stmts? ~
    ("else" ~ NEWLINE ~ stmts?)? ~
    "end"
}

while_stmt = {
    "while" ~ expr ~ NEWLINE ~
    stmts? ~
    "end"
}

for_stmt = {
    "for" ~ ident ~ "in" ~ expr ~ NEWLINE ~
    stmts? ~
    "end"
}

func_def = {
    "def" ~ ident ~ arg_list ~ NEWLINE ~
    stmts? ~
    "end"
}

func_def_one_line = {
    "def" ~ ident ~ arg_list ~ "=" ~ expr
}

class_def = {
    "class" ~ ident ~ class_arg_list? ~ NEWLINE ~
    stmts? ~
    "end"
}

class_arg_list = {
    "(" ~
        (ident ~ ":" ~ ident)* ~
    ")"
}

assignment = {
    assn_target ~ "=" ~ expr
}

assn_target = {
    (ident ~ ".")* ~ ident
}

expr = {
    comparison
}

comparison = {
    bool_expr ~ (comp_op ~ bool_expr)*
}

comp_op = {
    "==" | "!=" | ">=" | "<=" | "<" | ">"
}

bool_expr = {
    term ~ (bool_op ~ term)*
}
bool_op = { "and" | "or" }
term = {
    factor ~ (term_op ~ factor)*
}
term_op = { "+" | "-" }
factor = {
    access ~ (factor_op ~ access)*
}
factor_op = { "*" | "/" }

access = {
    (ident ~ ".")* ~ call
}

call = {
    ident ~ arg_list |
    primary
}

arg_list = {
    "(" ~ ")" |
    "(" ~ expr ~ ("," ~ expr)* ~ ","? ~ ")"
}

primary = {
    number |
    string |
    boolean |
    nil |
    grouping |
    array |
    dict |
    do_end |
    ident
}

do_end = {
    "do" ~ NEWLINE ~
    stmts? ~
    "end"
}

grouping = { "(" ~ expr ~ ")" }

array = {
    "[" ~ "]" |
    "[" ~ expr ~ ("," ~ expr)* ~ ","? ~ "]"
}

dict = {
    "[" ~ ":" ~ "]" |
    "[" ~ dict_entry ~ ("," ~ dict_entry)* ~ ","? ~ "]"
}

dict_entry = {
    (ident | string) ~ ":" ~ expr
}

boolean = { "true" | "false" }

nil = { "nil" }

ident = @{
    !(KEYWORD ~ !XID_START) ~
    XID_START ~ XID_CONTINUE*
}

KEYWORD = {
    "do" | "end" | "def" |
    "or" | "and" |
    "if" | "else" |
    "while" | "for" | "in" |
    "return"
}

number = @{
    "-"? ~
    integer ~
    ("." ~ mantissa)?
}
integer = { ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT }
mantissa = { ASCII_DIGIT+ }

string = @{
    "\"" ~ (!"\"" ~ ANY)* ~ "\""
}

WHITESPACE = _{ " " }
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }
